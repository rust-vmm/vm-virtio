/* automatically generated by rust-bindgen 0.61.0 */

pub const VIRTIO_BLK_F_SIZE_MAX: u32 = 1;
pub const VIRTIO_BLK_F_SEG_MAX: u32 = 2;
pub const VIRTIO_BLK_F_GEOMETRY: u32 = 4;
pub const VIRTIO_BLK_F_RO: u32 = 5;
pub const VIRTIO_BLK_F_BLK_SIZE: u32 = 6;
pub const VIRTIO_BLK_F_TOPOLOGY: u32 = 10;
pub const VIRTIO_BLK_F_MQ: u32 = 12;
pub const VIRTIO_BLK_F_DISCARD: u32 = 13;
pub const VIRTIO_BLK_F_WRITE_ZEROES: u32 = 14;
pub const VIRTIO_BLK_F_BARRIER: u32 = 0;
pub const VIRTIO_BLK_F_SCSI: u32 = 7;
pub const VIRTIO_BLK_F_FLUSH: u32 = 9;
pub const VIRTIO_BLK_F_CONFIG_WCE: u32 = 11;
pub const VIRTIO_BLK_F_WCE: u32 = 9;
pub const VIRTIO_BLK_ID_BYTES: u32 = 20;
pub const VIRTIO_BLK_T_IN: u32 = 0;
pub const VIRTIO_BLK_T_OUT: u32 = 1;
pub const VIRTIO_BLK_T_SCSI_CMD: u32 = 2;
pub const VIRTIO_BLK_T_FLUSH: u32 = 4;
pub const VIRTIO_BLK_T_GET_ID: u32 = 8;
pub const VIRTIO_BLK_T_DISCARD: u32 = 11;
pub const VIRTIO_BLK_T_WRITE_ZEROES: u32 = 13;
pub const VIRTIO_BLK_T_BARRIER: u32 = 2147483648;
pub const VIRTIO_BLK_WRITE_ZEROES_FLAG_UNMAP: u32 = 1;
pub const VIRTIO_BLK_S_OK: u32 = 0;
pub const VIRTIO_BLK_S_IOERR: u32 = 1;
pub const VIRTIO_BLK_S_UNSUPP: u32 = 2;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __le32 = __u32;
pub type __le64 = __u64;
pub type __virtio16 = __u16;
pub type __virtio32 = __u32;
pub type __virtio64 = __u64;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct virtio_blk_config {
    pub capacity: __virtio64,
    pub size_max: __virtio32,
    pub seg_max: __virtio32,
    pub geometry: virtio_blk_config_virtio_blk_geometry,
    pub blk_size: __virtio32,
    pub physical_block_exp: __u8,
    pub alignment_offset: __u8,
    pub min_io_size: __virtio16,
    pub opt_io_size: __virtio32,
    pub wce: __u8,
    pub unused: __u8,
    pub num_queues: __virtio16,
    pub max_discard_sectors: __virtio32,
    pub max_discard_seg: __virtio32,
    pub discard_sector_alignment: __virtio32,
    pub max_write_zeroes_sectors: __virtio32,
    pub max_write_zeroes_seg: __virtio32,
    pub write_zeroes_may_unmap: __u8,
    pub unused1: [__u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct virtio_blk_config_virtio_blk_geometry {
    pub cylinders: __virtio16,
    pub heads: __u8,
    pub sectors: __u8,
}
#[test]
fn bindgen_test_layout_virtio_blk_config_virtio_blk_geometry() {
    const UNINIT: ::std::mem::MaybeUninit<virtio_blk_config_virtio_blk_geometry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<virtio_blk_config_virtio_blk_geometry>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(virtio_blk_config_virtio_blk_geometry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_blk_config_virtio_blk_geometry>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(virtio_blk_config_virtio_blk_geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cylinders) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config_virtio_blk_geometry),
            "::",
            stringify!(cylinders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heads) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config_virtio_blk_geometry),
            "::",
            stringify!(heads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectors) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config_virtio_blk_geometry),
            "::",
            stringify!(sectors)
        )
    );
}
#[test]
fn bindgen_test_layout_virtio_blk_config() {
    const UNINIT: ::std::mem::MaybeUninit<virtio_blk_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<virtio_blk_config>(),
        60usize,
        concat!("Size of: ", stringify!(virtio_blk_config))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_blk_config>(),
        1usize,
        concat!("Alignment of ", stringify!(virtio_blk_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(size_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seg_max) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(seg_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(blk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_block_exp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(physical_block_exp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_offset) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(alignment_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_io_size) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(min_io_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_io_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(opt_io_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wce) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(wce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_queues) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(num_queues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_discard_sectors) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(max_discard_sectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_discard_seg) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(max_discard_seg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discard_sector_alignment) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(discard_sector_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_write_zeroes_sectors) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(max_write_zeroes_sectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_write_zeroes_seg) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(max_write_zeroes_seg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_zeroes_may_unmap) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(write_zeroes_may_unmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused1) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_config),
            "::",
            stringify!(unused1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct virtio_blk_outhdr {
    pub type_: __virtio32,
    pub ioprio: __virtio32,
    pub sector: __virtio64,
}
#[test]
fn bindgen_test_layout_virtio_blk_outhdr() {
    const UNINIT: ::std::mem::MaybeUninit<virtio_blk_outhdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<virtio_blk_outhdr>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_blk_outhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_blk_outhdr>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_blk_outhdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_outhdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_outhdr),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sector) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_outhdr),
            "::",
            stringify!(sector)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct virtio_blk_discard_write_zeroes {
    pub sector: __le64,
    pub num_sectors: __le32,
    pub flags: __le32,
}
#[test]
fn bindgen_test_layout_virtio_blk_discard_write_zeroes() {
    const UNINIT: ::std::mem::MaybeUninit<virtio_blk_discard_write_zeroes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<virtio_blk_discard_write_zeroes>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_blk_discard_write_zeroes))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_blk_discard_write_zeroes>(),
        8usize,
        concat!("Alignment of ", stringify!(virtio_blk_discard_write_zeroes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_discard_write_zeroes),
            "::",
            stringify!(sector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sectors) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_discard_write_zeroes),
            "::",
            stringify!(num_sectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_blk_discard_write_zeroes),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct virtio_scsi_inhdr {
    pub errors: __virtio32,
    pub data_len: __virtio32,
    pub sense_len: __virtio32,
    pub residual: __virtio32,
}
#[test]
fn bindgen_test_layout_virtio_scsi_inhdr() {
    const UNINIT: ::std::mem::MaybeUninit<virtio_scsi_inhdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<virtio_scsi_inhdr>(),
        16usize,
        concat!("Size of: ", stringify!(virtio_scsi_inhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_scsi_inhdr>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_scsi_inhdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_scsi_inhdr),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_scsi_inhdr),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sense_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_scsi_inhdr),
            "::",
            stringify!(sense_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).residual) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_scsi_inhdr),
            "::",
            stringify!(residual)
        )
    );
}
