#![no_main]
use rust_vmm_fuzz::{FuzzingDescriptor, VirtioQueueFunction};
use vm_memory::{GuestAddress, GuestMemoryMmap};
use virtio_queue::{mock::MockSplitQueue, Descriptor};
use libfuzzer_sys::{fuzz_target, arbitrary::Arbitrary};

/// Input generated by the fuzzer for fuzzing virtio_queue
#[derive(Arbitrary, Debug)]
pub struct VirtioQueueInput {
    pub fuzzing_descriptors: Vec<FuzzingDescriptor>,
    pub functions: Vec<VirtioQueueFunction>,
}

fuzz_target!(|virtio_queue_input: VirtioQueueInput| {
    let m = &GuestMemoryMmap::<()>::from_ranges(&[(GuestAddress(0), 0x10000)]).unwrap();
    let fuzzing_descriptors = virtio_queue_input.fuzzing_descriptors;
    let vq = MockSplitQueue::new(m, fuzzing_descriptors.len() as u16);
    let mut descriptors: Vec<Descriptor> = Vec::with_capacity(fuzzing_descriptors.len());
    for fuzzing_descriptor in fuzzing_descriptors {
        descriptors.push(fuzzing_descriptor.into());
    }
    vq.build_multiple_desc_chains(&descriptors[..]);
    let mut q = vq.create_queue(m);

    for function in virtio_queue_input.functions {
        function.call(&mut q.state, m);
    }
});
